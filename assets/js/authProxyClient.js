/**
 * AuthProxyClient.js - Cliente de autentica√ß√£o para API SyncPay
 * Gerencia autentica√ß√£o e tokens de acesso via proxy backend
 */

(function() {
    'use strict';

    let isAuthenticating = false; // Flag para evitar requisi√ß√µes simult√¢neas

    // Fun√ß√£o principal de autentica√ß√£o
    function authenticateSyncPay() {
        // Evitar rodar autentica√ß√£o quando aberto via file:// ou sem backend
        try {
            const isFileProtocol = typeof window !== 'undefined' && window.location && window.location.protocol === 'file:';
            if (isFileProtocol) {
                console.warn('AuthProxyClient: execu√ß√£o local detectada (file://). Autentica√ß√£o ignorada.');
                return;
            }
        } catch (_) {}
        // Evitar m√∫ltiplas requisi√ß√µes simult√¢neas
        if (isAuthenticating) {
            console.log('‚è≥ Autentica√ß√£o j√° em andamento, aguardando...');
            return;
        }

        isAuthenticating = true;
        console.log('üîê Iniciando autentica√ß√£o SyncPay...');

        // 1. Validar se as credenciais existem
        if (!window.SYNCPAY_CONFIG) {
            alert('‚ùå ERRO: Configura√ß√£o SYNCPAY_CONFIG n√£o encontrada!');
            console.error('SYNCPAY_CONFIG n√£o est√° definida');
            isAuthenticating = false;
            return;
        }

        const { client_id, client_secret } = window.SYNCPAY_CONFIG;

        if (!client_id || !client_secret) {
            alert('‚ùå ERRO: client_id ou client_secret n√£o configurados!\n\nVerifique o arquivo config.js');
            console.error('Credenciais ausentes:', { client_id: !!client_id, client_secret: !!client_secret });
            isAuthenticating = false;
            return;
        }

        console.log('‚úÖ Credenciais validadas com sucesso');

        // 2. Preparar dados da requisi√ß√£o
        const authData = {
            client_id: client_id,
            client_secret: client_secret,
            '01K1259MAXE0TNRXV2C2WQN2MV': 'auth_request_' + Date.now() // Campo obrigat√≥rio com timestamp
        };

        console.log('üì§ Enviando requisi√ß√£o de autentica√ß√£o via proxy...');

        // 3. Fazer requisi√ß√£o POST para o proxy backend (evita CORS)
        fetch('/api/auth-token', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(authData)
        })
        .then(response => {
            console.log('üì• Resposta recebida:', response.status, response.statusText);
            
            if (!response.ok) {
                return response.json().then(errorData => {
                    throw new Error(`HTTP ${response.status}: ${errorData.message || response.statusText}`);
                });
            }
            
            return response.json();
        })
        .then(data => {
            console.log('‚úÖ Autentica√ß√£o bem-sucedida:', data);
            
            // 4. Salvar access_token no sessionStorage
            if (data.access_token) {
                sessionStorage.setItem('access_token', data.access_token);
                sessionStorage.setItem('token_expires_at', data.expires_at);
                console.log('üíæ Token salvo no sessionStorage');
                console.log('‚è∞ Token expira em:', new Date(data.expires_at).toLocaleString());
                
                // alert('‚úÖ Autentica√ß√£o realizada com sucesso!\n\nToken de acesso salvo.'); // COMENTADO - removido aviso de autentica√ß√£o
            } else {
                throw new Error('Token de acesso n√£o encontrado na resposta');
            }
        })
        .catch(error => {
            console.error('‚ùå Erro na autentica√ß√£o:', error);
            // Evita alertas bloqueadores em ambiente local/sem backend
            if (window && window.location && window.location.protocol !== 'file:') {
                try { alert('‚ùå ERRO na autentica√ß√£o:\n\n' + error.message); } catch(_) {}
            }
        })
        .finally(() => {
            isAuthenticating = false; // Reset da flag
        });
    }

    // Fun√ß√£o para verificar se j√° existe um token v√°lido
    function checkExistingToken() {
        const existingToken = sessionStorage.getItem('access_token');
        const expiresAt = sessionStorage.getItem('token_expires_at');
        
        if (existingToken && expiresAt) {
            const now = new Date();
            const expiryDate = new Date(expiresAt);
            
            // Verificar se o token ainda √© v√°lido (com margem de 5 minutos)
            if (now < expiryDate - (5 * 60 * 1000)) {
                console.log('üîç Token v√°lido encontrado no sessionStorage');
                console.log('‚è∞ Token expira em:', expiryDate.toLocaleString());
                return existingToken;
            } else {
                console.log('‚ö†Ô∏è Token expirado, removendo...');
                clearAuthToken();
            }
        }
        return null;
    }

    // Fun√ß√£o para limpar token (logout)
    function clearAuthToken() {
        sessionStorage.removeItem('access_token');
        sessionStorage.removeItem('token_expires_at');
        console.log('üóëÔ∏è Token removido do sessionStorage');
    }

    // Fun√ß√£o para obter token atual
    function getCurrentToken() {
        const token = sessionStorage.getItem('access_token');
        const expiresAt = sessionStorage.getItem('token_expires_at');
        
        if (token && expiresAt) {
            const now = new Date();
            const expiryDate = new Date(expiresAt);
            
            if (now < expiryDate - (5 * 60 * 1000)) {
                return token;
            } else {
                clearAuthToken();
            }
        }
        return null;
    }

    // Fun√ß√£o para verificar se est√° autenticado
    function isAuthenticated() {
        return !!getCurrentToken();
    }

    // Fun√ß√£o para renovar token se necess√°rio
    function refreshTokenIfNeeded() {
        const token = getCurrentToken();
        if (!token) {
            console.log('üîê Token n√£o encontrado, iniciando autentica√ß√£o...');
            authenticateSyncPay();
        }
    }

    // Auto-inicializa√ß√£o quando o DOM estiver pronto
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üöÄ AuthProxyClient carregado e pronto');
            
            // Verificar se j√° existe um token v√°lido
            const isFileProtocol = window.location.protocol === 'file:';
            if (isFileProtocol) {
                console.warn('AuthProxyClient: ambiente local detectado; pular autentica√ß√£o.');
            } else {
                const existingToken = checkExistingToken();
                if (!existingToken) {
                    console.log('üîê Nenhum token v√°lido encontrado, iniciando autentica√ß√£o...');
                    setTimeout(authenticateSyncPay, 1000);
                } else {
                    console.log('‚úÖ Token v√°lido encontrado, autentica√ß√£o n√£o necess√°ria');
                }
            }
        });
    } else {
        // DOM j√° est√° pronto
        console.log('üöÄ AuthProxyClient carregado (DOM j√° pronto)');
        const isFileProtocol = window.location.protocol === 'file:';
        if (!isFileProtocol) {
            const existingToken = checkExistingToken();
            if (!existingToken) {
                setTimeout(authenticateSyncPay, 1000);
            }
        } else {
            console.warn('AuthProxyClient: ambiente local detectado; pular autentica√ß√£o.');
        }
    }

    // Expor fun√ß√µes para uso global
    window.AuthProxyClient = {
        authenticate: authenticateSyncPay,
        checkToken: checkExistingToken,
        clearToken: clearAuthToken,
        getToken: getCurrentToken,
        isAuthenticated: isAuthenticated,
        refreshToken: refreshTokenIfNeeded
    };

    console.log('üîß AuthProxyClient inicializado e dispon√≠vel globalmente');

})();
